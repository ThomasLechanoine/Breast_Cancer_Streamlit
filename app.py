import streamlit as st
import requests
from PIL import Image
import io
import tensorflow as tf
import joblib
import sys
import os
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix
from params import *  # Importation des URLs API
import tensorflow as tf
from Deep_learning.dl_model import RandomFixedDense
# Machine Learning Imports
from Machine_learning.ml_preprocess import load_data, preprocess_data
from Machine_learning.ml_model import create_model, tune_hyperparameters, evaluate_model
#----------------------------------------------------------------------------------------------------------

# Add Machine_learning/ to sys.path for module access
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "Machine_learning")))

# ---------------------- CONFIGURATION ----------------------
st.set_page_config(page_title="Application de D√©tection de Cancer du sein", layout="wide")




# Image √† afficher √† gauche dans la sidebar
image_path_left = os.path.join("app_img", "2.jpg") #<------------------------------------------------
image = Image.open(image_path_left)

# Afficher l'image sur la barre lat√©rale
st.sidebar.image(image_path_left, use_container_width=True)

# ---------------------- CUSTOM PAGE NAVIGATION ----------------------
st.sidebar.markdown(
    "<div style='text-align: center; font-size: 22px; font-weight: bold;'>Navigation</div>",
    unsafe_allow_html=True
)

# Maintain session state for page navigation
if "page" not in st.session_state:
    st.session_state.page = "Classification Tumeurs (ML)"

# if st.sidebar.button("Graphiques"):
#     st.session_state.page = "Graphiques"
if st.sidebar.button("üî¨ Classification Tumeurs \n (Machine Learning)", use_container_width=True):
    st.session_state.page = "Classification Tumeurs (ML)"
if st.sidebar.button("üì∏ Pr√©diction Mammographie \n (Deep Learning)", use_container_width=True):
    st.session_state.page = "Pr√©diction Mammographie (DL)"


page = st.session_state.page

# Image √† afficher √† gauche dans la sidebar
image_path_left = os.path.join("app_img", "01.png") #<------------------------------------------------
image = Image.open(image_path_left)

# Afficher l'image sur la barre lat√©rale
st.sidebar.image(image_path_left, use_container_width=True)
#------------------------------------------------------------------------------

# Load and display the cover image
# image_path = os.path.join("/home", "bren", "code", "ThomasLechanoine", "Breast_Cancer_Project", "app_img", "01.png")
# st.image(image_path, use_container_width=True)

# # ---------------------- GRAPHICS PAGE ----------------------
# if page == "Graphiques":
#     st.title("Visualisation des Graphiques")
#     st.write("Analyse des donn√©es avec des visualisations graphiques.")

#     # D√©finition du r√©pertoire contenant les graphiques
#     graph_dir = os.path.join("/home", "bren", "code", "ThomasLechanoine", "Breast_Cancer_Project", "app_img")

#     # Liste des nouveaux graphiques avec descriptions
#     graph_data = [
#         {"file": "distribution_age_kde_true.jpg", "title": "Graphique 1", "description": "üî¨ Distribution des √¢ges avec courbe KDE."},
#         {"file": "graphique2.jpg", "title": "Graphique 2", "description": "üìä Analyse exploratoire des donn√©es."},
#         {"file": "graphique.jpg", "title": "Graphique 3", "description": "üìà Un autre graphique pertinent pour l'analyse."}
#     ]

#     # Affichage des images avec menu d√©roulant pour description
#     for graph in graph_data:
#         img_path = os.path.join(graph_dir, graph["file"])

#         with st.expander(f"üìä {graph['title']}"):
#             st.image(img_path, use_container_width=True)
#             st.write(graph["description"])

# Ajout de style CSS pour rendre le contour du menu d√©roulant plus visible
#-------------------------------------------------------------------------------------------------------

st.markdown("""
    <style>
        /* Style pour rendre le contour du menu d√©roulant plus visible */
        div[data-testid="stExpander"] {
            border: 2px solid #4A90E2 !important; /* Bleu vif */
            border-radius: 10px !important;
            background-color: #E3F2FD !important; /* Bleu pastel */
            padding: 10px !important;
        }

        /* Style du titre dans l'expander */
        div[data-testid="stExpander"] summary {
            font-weight: bold !important;
            font-size: 16px !important;
            color: #1A1A1A !important;
        }
    </style>
""", unsafe_allow_html=True)
#-------------------------------------------------------------------------------------------------------

# ---------------------- LOAD MODELS DL---------------------
@st.cache_resource
def load_dl_model():
    return tf.keras.models.load_model(DL_MODEL_PATH, custom_objects={"RandomFixedDense": RandomFixedDense})
 #//////////

model = load_dl_model()

# ---------------------- LOAD MODELS ML---------------------
# Load the trained model and scaler
@st.cache_resource
def load_model():
    MODEL_PATH = ML_MODEL_PATH
    SCALER_PATH = ML_SCALER_PATH
    if os.path.exists(MODEL_PATH) and os.path.exists(SCALER_PATH):
        model = joblib.load(MODEL_PATH)
        scaler = joblib.load(SCALER_PATH)
        return model, scaler
    else:
        st.error("‚ùå Mod√®le ML non trouv√©. Entra√Ænez-le avec `python main.py --train ml`.")
        return None, None

model, scaler = load_model()

# ---------------------- LOAD test data--------------------- a voir si besoin
@st.cache_resource
def load_test_data():
    dataset_path = ML_DATA_PATH #<------------------------------------------------
    data = pd.read_csv(dataset_path)
    X = data.drop(columns=["id", "diagnosis"])  # Drop unnecessary columns
    y = data["diagnosis"].map({"B": 0, "M": 1})  # Encode labels (B:0, M:1)

    # Split into train and test (must match how the model was trained)
    from sklearn.model_selection import train_test_split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

    return X_test, y_test

# Load test dataset
X_test, y_test = load_test_data()

# ////////////////////////Page de pr√©diction via Machine Learning/////////////////////////
#----------------------------------------------
st.markdown("""
    <style>
        /* Fond g√©n√©ral en bleu pastel */
        .stApp {
            background-color: #E3F2FD !important;
        }

        /* Modification du header (bande sup√©rieure) */
        header, .st-emotion-cache-18ni7ap {
            background-color: #E3F2FD !important;
        }

        /* Titres en couleur fonc√©e pour contraste */
        h1, h2, h3, h4, h5, h6, p, label {
            color: #1A1A1A !important;
            font-weight: bold !important;
        }

        /* Bouton principal (st.button et st.form_submit_button) */
        div.stButton > button, div[data-testid="stFormSubmitButton"] > button {
            background-color: #FFA69E !important; /* Rouge saumon pastel */
            color: #FFFFFF !important; /* Texte blanc */
            border-radius: 12px !important;
            font-size: 18px !important;
            font-weight: bold !important;
            padding: 12px 24px !important;
            border: none !important; /* Suppression des bordures */
            box-shadow: none !important; /* Suppression de l'ombre */
            transition: all 0.3s ease-in-out !important;
        }

        /* Effet hover sur les boutons */
        div.stButton > button:hover, div[data-testid="stFormSubmitButton"] > button:hover {
            background-color: #FF6B6B !important; /* Rouge plus fonc√© */
            box-shadow: none !important; /* Suppression de l‚Äôombre */
            transform: scale(1.05) !important; /* Effet l√©ger d'agrandissement */
        }

        /* Style des inputs */
        .stNumberInput>div>div {
            width: 140px !important;
            border-radius: 8px !important;
            border: 2px solid #A1C4FD !important; /* Bleu pastel */
            background-color: #FFFFFF !important;
            color: #1A1A1A !important;
            padding: 5px !important;
        }

        /* Texte des inputs */
        div[data-testid="stNumberInput"] input {
            font-size: 14px !important;
            padding: 10px !important;
            text-align: center !important;
            background-color: #FFFFFF !important;
            color: #1A1A1A !important;
            border: none !important;
        }

        /* Style du sidebar */
        .stSidebar {
            background-color: #B2D3FF !important;
        }

        /* Style des r√©sultats de pr√©diction */
        .stSuccess {
            border-radius: 10px !important;
            padding: 10px !important;
            text-align: center !important;
            font-weight: bold !important;
            color: white !important;
        }
    </style>
""", unsafe_allow_html=True)


# ------------------- Machine Learning Prediction -------------------
# URL de l'API pour la pr√©diction ML
ML_API_URL = ML_API_URL  # !!! Remplacer cette URL si l'API est h√©berg√©e en ligne #<------------------------------------------------


# ------------------- Machine Learning Prediction -------------------
if page == "Classification Tumeurs (ML)":
    st.title("Classification de tumeurs via Machine Learning")

    #  Valeurs par d√©faut (corrig√©es)
    default_values_1 = {
        "radius_mean": 17.99, "texture_mean": 10.38, "perimeter_mean": 122.8, "area_mean": 1001.0,
        "smoothness_mean": 0.1184, "compactness_mean": 0.2776, "concavity_mean": 0.3001, "concave points_mean": 0.1471,
        "symmetry_mean": 0.2419, "fractal_dimension_mean": 0.07871, "radius_se": 1.095, "texture_se": 0.9053,
        "perimeter_se": 8.589, "area_se": 153.4, "smoothness_se": 0.006399, "compactness_se": 0.04904,
        "concavity_se": 0.05373, "concave points_se": 0.01587, "symmetry_se": 0.03003, "fractal_dimension_se": 0.006193,
        "radius_worst": 25.38, "texture_worst": 17.33, "perimeter_worst": 184.6, "area_worst": 2019.0,
        "smoothness_worst": 0.1622, "compactness_worst": 0.6656, "concavity_worst": 0.7119, "concave points_worst": 0.2654,
        "symmetry_worst": 0.4601, "fractal_dimension_worst": 0.1189
    }

    default_values_2 = {
        "radius_mean": 13.64, "texture_mean": 16.34, "perimeter_mean": 87.21, "area_mean": 571.8,
        "smoothness_mean": 0.07685, "compactness_mean": 0.06059, "concavity_mean": 0.01857, "concave points_mean": 0.01723,
        "symmetry_mean": 0.1353, "fractal_dimension_mean": 0.05953, "radius_se": 0.1872, "texture_se": 0.9234,
        "perimeter_se": 1.449, "area_se": 14.55, "smoothness_se": 0.004477, "compactness_se": 0.01177,
        "concavity_se": 0.01079, "concave points_se": 0.007956, "symmetry_se": 0.01325, "fractal_dimension_se": 0.002551,
        "radius_worst": 14.67, "texture_worst": 23.19, "perimeter_worst": 96.08, "area_worst": 656.7,
        "smoothness_worst": 0.1089, "compactness_worst": 0.1582, "concavity_worst": 0.105, "concave points_worst": 0.08586,
        "symmetry_worst": 0.2346, "fractal_dimension_worst": 0.08025
    }
    #sc√©nario
    st.write("Sc√©nario 1 : Un m√©decin re√ßoit des donn√©es issues de l'imagerie m√©dicale ‚Üí analyse avec le Machine Learning.")
    # Ajout du sous-titre et explication du Machine Learning
    st.subheader("Qu'est-ce que le Machine Learning ?")

    with st.expander("Le Machine Learning en quelques mots"):
        st.write("""

        üß† Vous vous rappelez de l'exemple de l'enfant qui apprend a reconnaitre les chocolatines grace √† des informations d√©crivant une chocolatine et du parall√®le avec le Machine Learning ?

        üì∏ Application √† notre cas :
        Nous avons donn√© au mod√®le **des informations de description de tumeur**, pour qu'il apprenne √† **reconna√Ætre si la tumeur est maligne ou benigne**.
        """)

    # üîç **Comme expliqu√© dans l'introduction, le Machine Learning (ML)** est une branche de l'intelligence artificielle.
    # Ajout du sous-titre et explication du Machine Learning
    st.subheader("Notre d√©fi?")

    with st.expander("Analyser les tumeurs"):
        st.write("""
        üîç Notre d√©fi √©tait de **pouvoir D√©velopper un mod√®le capable de classifier les tumeurs b√©nignes et malignes √† partir de caract√©ristiques extraites d‚Äôimages m√©dicales.**.

        üéØ Pour cela, nous avons propos√© un Diagnostic Assist√© par Machine Learning.
        """)

    # Ajout d'un deuxi√®me sous-titre avant l'input des caract√©ristiques tumorales
    st.subheader("Outil de pr√©diction")
    # st.write("Veuillez entrer les mesures de la tumeur pour obtenir une pr√©diction.")
    st.write("Apr√®s avoir entr√© les param√®tres, notre mod√®le effectue l‚Äôanalyse et fournit une pr√©diction.")

 # ------------------- PR√âDICTION 1 -------------------
    st.subheader("üî¨ Pr√©diction 1")
    with st.form(key="prediction_form_1"):
        columns = st.columns(5)
        feature_values_1 = {}

        for i, feature in enumerate(default_values_1.keys()):
            with columns[i % 5]:
                feature_values_1[feature] = st.number_input(
                    feature, min_value=0.0, format="%.4f", value=default_values_1[feature]
                )

        submit_button_1 = st.form_submit_button(label="Lancer la Pr√©diction 1")


    if submit_button_1:
        input_data_1 = pd.DataFrame([list(feature_values_1.values())], columns=default_values_1.keys())

        if input_data_1.isnull().values.any():
            st.error("‚ö†Ô∏è Certaines valeurs sont vides ou incorrectes ! Veuillez remplir tous les champs.")
        else:
            input_data_json = {"features": input_data_1.values.tolist()[0]}
            response = requests.post(ML_API_URL, json=input_data_json)

            if response.status_code == 200:
                prediction_1 = response.json()["diagnostic"]
            else:
                prediction_1 = "Erreur lors de la pr√©diction."

            # **Mise en forme du r√©sultat**
            if "Malin" in prediction_1:
                diagnostic_1 = "üî¥ Tumeur Maligne"
                color_1 = "#F76C6C"  # Rouge pastel
            else:
                diagnostic_1 = "üîµ Tumeur B√©nigne"
                color_1 = "#A1C4FD"  # Bleu pastel

            st.markdown(
                f'<div style="background-color:{color_1}; padding:15px; border-radius:10px; text-align:center; '
                f'font-size:16px; color:white; font-weight:bold;">'
                f'R√©sultat de la pr√©diction 1 : {diagnostic_1}'
                '</div>',
                unsafe_allow_html=True
            )
    # ------------------- PR√âDICTION 2 -------------------
    st.subheader("üî¨ Pr√©diction 2")
    with st.form(key="prediction_form_2"):
        columns = st.columns(5)
        feature_values_2 = {}

        for i, feature in enumerate(default_values_2.keys()):
            with columns[i % 5]:
                feature_values_2[feature] = st.number_input(
                    feature, min_value=0.0, format="%.4f", value=default_values_2[feature]
                )

        submit_button_2 = st.form_submit_button(label="Lancer la Pr√©diction 2")

    if submit_button_2:
        input_data_2 = pd.DataFrame([list(feature_values_2.values())], columns=default_values_2.keys())

        if input_data_2.isnull().values.any():
            st.error("‚ö†Ô∏è Certaines valeurs sont vides ou incorrectes ! Veuillez remplir tous les champs.")
        else:
            input_data_json = {"features": input_data_2.values.tolist()[0]}
            response = requests.post(ML_API_URL, json=input_data_json)

            if response.status_code == 200:
                prediction_2 = response.json()["diagnostic"]
            else:
                prediction_2 = "Erreur lors de la pr√©diction."

            #  **Mise en forme du r√©sultat**
            if "Malin" in prediction_2:
                diagnostic_2 = "üî¥ Malin (Cancer)"
                color_2 = "#F76C6C"  # Rouge pastel
            else:
                diagnostic_2 = "üîµ B√©nin"
                color_2 = "#A1C4FD"  # Bleu pastel

            st.markdown(
                f'<div style="background-color:{color_2}; padding:15px; border-radius:10px; text-align:center; '
                f'font-size:16px; color:white; font-weight:bold;">'
                f'R√©sultat de la pr√©diction 2 : {diagnostic_2}'
                '</div>',
                unsafe_allow_html=True
            )

#--------------------CONFUSION MATRIX------------------
# ------------------- AFFICHAGE DE LA MATRICE DE CONFUSION SUR LA PAGE ML -------------------
if page == "Classification Tumeurs (ML)":
    st.subheader("üìä Performance de notre Mod√®le de Machine Learning")

    # üìå D√©terminer dynamiquement le dossier contenant `app.py`
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))

    # üìå Construire un chemin relatif et g√©n√©ralisable vers l'image de performance
    cm_image_path_ml = os.path.join(BASE_DIR, "app_img", "Performance Machin Learning.png")

    # üìå V√©rifier si le fichier existe avant d'afficher
    if os.path.exists(cm_image_path_ml):
        with st.expander("üìä Afficher l'√âvaluation du Mod√®le"):
            st.image(cm_image_path_ml, caption="Performance du Mod√®le Machine Learning", use_container_width=True)
    else:
        st.warning(f"‚ö†Ô∏è L'image de performance n'a pas √©t√© trouv√©e : {cm_image_path_ml}")


    # Ajout de la phrase de pr√©cision sous la matrice de confusion
    st.markdown(
        """
        üîç **Fiabilit√© du mod√®le Machine Learning :**

        ‚úÖ **98.4 % des tumeurs malignes** sont correctement d√©tect√©es.

        ‚úÖ **99.1 % des tumeurs b√©nignes** sont correctement d√©tect√©es.
        """
    )



# ////////////////////// Page de pr√©diction DEEP LEARNING /////////////////////////////

if page == "Pr√©diction Mammographie (DL)":
    # Configuration de la page
    st.title("Pr√©diction de Tumeurs via Deep Learning")
    #sc√©nario
    st.write("Sc√©nario 2 : Un m√©decin re√ßoit des mammographies ‚Üí utilisation du Deep Learning pour l‚Äôanalyse d‚Äôimages.")

    # ---------------------- SECTION EXPLICATION DEEP LEARNING ----------------------
    st.subheader("Qu'est-ce que le Deep Learning ?")

    with st.expander("Le Deep Learning en quelques mots"):
        st.write("""

        üß† Vous vous rappelez de l'exemple de l'enfant qui apprend a reconnaitre les chocolatines gr√¢ce √† des images et du parall√®le avec le Deep Learning ?

        üì∏ Application √† notre cas :
        **Nous avons montr√© au mod√®le des** milliers de mammographies, **afin qu'il apprenne √† d√©tecter la pr√©sence ou l'absence d'une tumeur**.
        """)

       # üîç Comme expliqu√© dans l'introduction, le Deep Learning est une branche de l'intelligence artificielle.
    # ---------------------- SECTION NOTRE D√âFI ----------------------
    st.subheader("Notre d√©fi ?")

    with st.expander("Analyser les mammographies"):
        st.write("""
        üîç Notre d√©fi √©tait de pouvoir D√©velopper un mod√®le capable d'analyser les images de mammographies et d√©tecter la pr√©sence d'une tumeur.

        üéØ Pour cela, nous avons r√©alis√© une interface permettant aux utilisateurs de t√©l√©charger une image de mammographie, que notre mod√®le analysera pour fournir une pr√©diction.
        """)

    # ---------------------- OUTIL DE PR√âDICTION ----------------------
    st.subheader("Outil de pr√©diction")
    st.write("")

    # ---------------------- PREMIER UPLOAD D'IMAGE AVEC PR√âDICTION ----------------------

    st.subheader("üì∏ Analyse de Mammographie 1")
    st.write("T√©l√©chargez une image de mammographie et appuyez sur **Pr√©diction** pour obtenir le r√©sultat.")

    uploaded_file = st.file_uploader("", type=["png", "jpg", "jpeg"])

    if uploaded_file is not None:
        image = Image.open(uploaded_file)

        # Redimensionner l‚Äôimage pour l‚Äôaffichage
        max_width = 500
        w_percent = max_width / float(image.size[0])
        new_height = int(float(image.size[1]) * w_percent)
        image_resized = image.resize((max_width, new_height), Image.LANCZOS)

        # Afficher l‚Äôimage redimensionn√©e
        st.image(image_resized, caption="Image Redimensionn√©e", use_container_width=False)

        # Bouton de pr√©diction
        if st.button("Lancer la pr√©diction"):
            img_bytes = io.BytesIO()
            image.save(img_bytes, format="PNG")
            img_bytes = img_bytes.getvalue()

            files = {"file": ("image.png", img_bytes, "image/png")}

            try:
                response = requests.post(DL_API_URL, files=files)

                if response.status_code == 200:
                    result = response.json()
                    diagnostic = result.get('diagnostic', 'Inconnu')

                    if "Positif" in diagnostic:
                        diagnostic_text = "üî¥ Positif (1) : Tumeur d√©tect√©e"
                        color_code = "#F76C6C"
                    else:
                        diagnostic_text = "üîµ N√©gatif (0) : Pas de Tumeur d√©tect√©e"
                        color_code = "#A1C4FD"

                    st.markdown(
                        f'<div style="background-color:{color_code}; padding:15px; border-radius:10px; text-align:center; '
                        f'font-size:16px; color:white; font-weight:bold;">'
                        f'{diagnostic_text}'
                        '</div>',
                        unsafe_allow_html=True
                    )
                else:
                    st.error("Erreur lors de la requ√™te √† l‚ÄôAPI")

            except Exception as e:
                st.error(f"Erreur lors de l‚Äôappel API : {e}")

    # ---------------------- DEUXI√àME UPLOAD D'IMAGE AVEC PR√âDICTION ----------------------

    st.subheader("üì∏ Analyse de Mammographie 2")
    st.write("T√©l√©chargez une image de mammographie et appuyez sur **Pr√©diction** pour obtenir le r√©sultat.")

    uploaded_file_2 = st.file_uploader("", type=["png", "jpg", "jpeg"], key="uploader_2")

    if uploaded_file_2 is not None:
        image_2 = Image.open(uploaded_file_2)

        # Redimensionner l‚Äôimage pour l‚Äôaffichage
        max_width = 500
        w_percent = max_width / float(image_2.size[0])
        new_height = int(float(image_2.size[1]) * w_percent)
        image_resized_2 = image_2.resize((max_width, new_height), Image.LANCZOS)

        # Afficher l‚Äôimage redimensionn√©e
        st.image(image_resized_2, caption="Deuxi√®me Image Redimensionn√©e", use_container_width=False)

        # Bouton de pr√©diction pour la deuxi√®me image
        if st.button("Lancer la deuxi√®me pr√©diction"):
            img_bytes_2 = io.BytesIO()
            image_2.save(img_bytes_2, format="PNG")
            img_bytes_2 = img_bytes_2.getvalue()

            files_2 = {"file": ("image2.png", img_bytes_2, "image/png")}

            try:
                response_2 = requests.post(DL_API_URL, files=files_2)

                if response_2.status_code == 200:
                    result_2 = response_2.json()
                    diagnostic_2 = result_2.get('diagnostic', 'Inconnu')

                    if "Positif" in diagnostic_2:
                        diagnostic_text_2 = "üî¥ Positif (1) : Tumeur d√©tect√©e"
                        color_code_2 = "#F76C6C"
                    else:
                        diagnostic_text_2 = "üîµ N√©gatif (0) : Pas de Tumeur d√©tect√©e"
                        color_code_2 = "#A1C4FD"

                    st.markdown(
                        f'<div style="background-color:{color_code_2}; padding:15px; border-radius:10px; text-align:center; '
                        f'font-size:16px; color:white; font-weight:bold;">'
                        f'{diagnostic_text_2}'
                        '</div>',
                        unsafe_allow_html=True
                    )
                else:
                    st.error("Erreur lors de la requ√™te √† l‚ÄôAPI")

            except Exception as e:
                st.error(f"Erreur lors de l‚Äôappel API : {e}")

# Fonction pour afficher la matrice de confusion dans Streamlit
# üìå Ajout dans la section "Pr√©diction Mammographie (DL)"
# üìå Fonction pour afficher l'image de performance du mod√®le Deep Learning
if page == "Pr√©diction Mammographie (DL)":
    st.subheader("üìä Performance de notre Mod√®le de Deep Learning")

    # üìå D√©terminer dynamiquement le dossier contenant `app.py`
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))

    # üìå Construire un chemin relatif et g√©n√©ralisable vers l'image de performance
    cm_image_path = os.path.join(BASE_DIR, "app_img", "Performance Deep Learning.png")

    # üìå V√©rifier si le fichier existe avant d'afficher
    if os.path.exists(cm_image_path):
        with st.expander("üìä Afficher l'√âvaluation du Mod√®le"):
            st.image(cm_image_path, caption="Performance du Mod√®le Deep Learning", use_container_width=True)
    else:
        st.warning(f"‚ö†Ô∏è L'image de performance n'a pas √©t√© trouv√©e : {cm_image_path}")

    st.markdown(
        """
        üîç **Fiabilit√© du mod√®le Deep Learning :**

        ‚úÖ **98.0 % des patientes avec tumeur** sont correctement d√©tect√©es.

        ‚úÖ **97.9 % des patientes sans tumeur** sont bien identifi√©es.
        """
    )
